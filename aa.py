import random
import string

def generate_password():
    """–ë–∞–∑–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–∞—Ä–æ–ª—è"""
    print("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ø–∞—Ä–æ–ª–µ–π!")
    length = int(input("–í–≤–µ–¥–∏—Ç–µ –¥–ª–∏–Ω—É –ø–∞—Ä–æ–ª—è: "))
    
    # –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–∞—Ä–æ–ª—å –∏–∑ –±—É–∫–≤
    characters = string.ascii_letters
    password = ''.join(random.choice(characters) for _ in range(length))
    
    return password

if __name__ == "__main__":
    password = generate_password()
    print(f"–í–∞—à –ø–∞—Ä–æ–ª—å: {password}")

import random
import string

def get_user_preferences():
    """–ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞—Ä–æ–ª—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    print("\n=== –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –ø–∞—Ä–æ–ª–µ–π ===")
    length = int(input("–í–≤–µ–¥–∏—Ç–µ –¥–ª–∏–Ω—É –ø–∞—Ä–æ–ª—è: "))
    
    print("\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø—ã —Å–∏–º–≤–æ–ª–æ–≤:")
    use_lowercase = input("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å—Ç—Ä–æ—á–Ω—ã–µ –±—É–∫–≤—ã? (y/n): ").lower() == 'y'
    use_uppercase = input("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∑–∞–≥–ª–∞–≤–Ω—ã–µ –±—É–∫–≤—ã? (y/n): ").lower() == 'y'
    use_digits = input("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ü–∏—Ñ—Ä—ã? (y/n): ").lower() == 'y'
    use_special = input("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã? (y/n): ").lower() == 'y'
    
    return length, use_lowercase, use_uppercase, use_digits, use_special

def generate_password():
    """–£–ª—É—á—à–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–∞—Ä–æ–ª—è"""
    length, use_lower, use_upper, use_digits, use_special = get_user_preferences()
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –Ω–∞–±–æ—Ä —Å–∏–º–≤–æ–ª–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    characters = ""
    if use_lower:
        characters += string.ascii_lowercase
    if use_upper:
        characters += string.ascii_uppercase
    if use_digits:
        characters += string.digits
    if use_special:
        characters += string.punctuation
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—ã–±—Ä–∞–Ω —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Ç–∏–ø —Å–∏–º–≤–æ–ª–æ–≤
    if not characters:
        print("–û—à–∏–±–∫–∞: –Ω—É–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Ç–∏–ø —Å–∏–º–≤–æ–ª–æ–≤!")
        return None
    
    password = ''.join(random.choice(characters) for _ in range(length))
    return password

if __name__ == "__main__":
    password = generate_password()
    if password:
        print(f"\n‚úÖ –í–∞—à —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å: {password}")

import random
import string
import re

def evaluate_password_strength(password):
    """–û—Ü–µ–Ω–∏–≤–∞–µ—Ç —Å–ª–æ–∂–Ω–æ—Å—Ç—å –ø–∞—Ä–æ–ª—è"""
    score = 0
    feedback = []
    
    if len(password) >= 12:
        score += 2
        feedback.append("‚úÖ –î–ª–∏–Ω–∞ –ø–∞—Ä–æ–ª—è —Ö–æ—Ä–æ—à–∞—è")
    elif len(password) >= 8:
        score += 1
        feedback.append("‚ö†Ô∏è  –ü–∞—Ä–æ–ª—å —Å—Ä–µ–¥–Ω–µ–π –¥–ª–∏–Ω—ã")
    else:
        feedback.append("‚ùå –ü–∞—Ä–æ–ª—å —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Å–∏–º–≤–æ–ª–æ–≤
    if re.search(r'[a-z]', password):
        score += 1
    if re.search(r'[A-Z]', password):
        score += 1
    if re.search(r'\d', password):
        score += 1
    if re.search(r'[!@#$%^&*(),.?":{}|<>]', password):
        score += 1
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
    if score >= 5:
        strength = "–û—á–µ–Ω—å —Å–∏–ª—å–Ω—ã–π"
    elif score >= 3:
        strength = "–°–∏–ª—å–Ω—ã–π"
    elif score >= 2:
        strength = "–°—Ä–µ–¥–Ω–∏–π"
    else:
        strength = "–°–ª–∞–±—ã–π"
    
    feedback.append(f"üèÜ –£—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏: {strength} (–æ—á–∫–æ–≤: {score}/6)")
    return strength, feedback

def generate_password():
    """–§—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–∞—Ä–æ–ª—è —Å –æ—Ü–µ–Ω–∫–æ–π —Å–ª–æ–∂–Ω–æ—Å—Ç–∏"""
    length, use_lower, use_upper, use_digits, use_special = get_user_preferences()
    
    characters = ""
    if use_lower:
        characters += string.ascii_lowercase
    if use_upper:
        characters += string.ascii_uppercase
    if use_digits:
        characters += string.digits
    if use_special:
        characters += string.punctuation
    
    if not characters:
        print("–û—à–∏–±–∫–∞: –Ω—É–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Ç–∏–ø —Å–∏–º–≤–æ–ª–æ–≤!")
        return None
    
    password = ''.join(random.choice(characters) for _ in range(length))
    
    # –û—Ü–µ–Ω–∏–≤–∞–µ–º —Å–ª–æ–∂–Ω–æ—Å—Ç—å –ø–∞—Ä–æ–ª—è
    strength, feedback = evaluate_password_strength(password)
    
    return password, strength, feedback

if __name__ == "__main__":
    result = generate_password()
    if result:
        password, strength, feedback = result
        print(f"\nüîê –í–∞—à —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å: {password}")
        print("\n".join(feedback))

import random
import string
import re
from datetime import datetime

def save_passwords_to_file(passwords, filename="passwords.txt"):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø–∞—Ä–æ–ª–∏ –≤ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª"""
    try:
        with open(filename, 'w', encoding='utf-8') as file:
            file.write(f"=== –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–∞—Ä–æ–ª–∏ ===\n")
            file.write(f"–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n")
            file.write("=" * 40 + "\n\n")
            
            for i, (password, strength, _) in enumerate(passwords, 1):
                file.write(f"–ü–∞—Ä–æ–ª—å #{i}:\n")
                file.write(f"–ü–∞—Ä–æ–ª—å: {password}\n")
                file.write(f"–°–ª–æ–∂–Ω–æ—Å—Ç—å: {strength}\n")
                file.write("-" * 30 + "\n")
        
        print(f"‚úÖ –ü–∞—Ä–æ–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª: {filename}")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}")
        return False

def generate_multiple_passwords():
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–∞—Ä–æ–ª–µ–π"""
    print("\n=== –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø–∞—Ä–æ–ª–µ–π ===")
    
    try:
        num_passwords = int(input("–°–∫–æ–ª—å–∫–æ –ø–∞—Ä–æ–ª–µ–π —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å? "))
        length, use_lower, use_upper, use_digits, use_special = get_user_preferences()
        
        characters = ""
        if use_lower:
            characters += string.ascii_lowercase
        if use_upper:
            characters += string.ascii_uppercase
        if use_digits:
            characters += string.digits
        if use_special:
            characters += string.punctuation
        
        if not characters:
            print("–û—à–∏–±–∫–∞: –Ω—É–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Ç–∏–ø —Å–∏–º–≤–æ–ª–æ–≤!")
            return None
        
        passwords = []
        for i in range(num_passwords):
            password = ''.join(random.choice(characters) for _ in range(length))
            strength, feedback = evaluate_password_strength(password)
            passwords.append((password, strength, feedback))
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        print(f"\n=== –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {num_passwords} –ø–∞—Ä–æ–ª–µ–π ===")
        for i, (password, strength, feedback) in enumerate(passwords, 1):
            print(f"\nüîê –ü–∞—Ä–æ–ª—å #{i}: {password}")
            print(f"üèÜ –°–ª–æ–∂–Ω–æ—Å—Ç—å: {strength}")
        
        # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ —Ñ–∞–π–ª
        save_choice = input("\nüíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–∞—Ä–æ–ª–∏ –≤ —Ñ–∞–π–ª? (y/n): ").lower()
        if save_choice == 'y':
            filename = input("–í–≤–µ–¥–∏—Ç–µ –∏–º—è —Ñ–∞–π–ª–∞ (–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ Enter –¥–ª—è passwords.txt): ").strip()
            if not filename:
                filename = "passwords.txt"
            save_passwords_to_file(passwords, filename)
        
        return passwords
        
    except ValueError:
        print("‚ùå –û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ!")
        return None

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≥—Ä–∞–º–º—ã"""
    print("üéØ –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö –ø–∞—Ä–æ–ª–æ–≤")
    print("=" * 40)
    
    while True:
        print("\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")
        print("1 - –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ–¥–∏–Ω –ø–∞—Ä–æ–ª—å")
        print("2 - –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–∞—Ä–æ–ª–µ–π")
        print("3 - –í—ã–π—Ç–∏")
        
        choice = input("–í–∞—à –≤—ã–±–æ—Ä (1-3): ").strip()
        
        if choice == '1':
            result = generate_password()
            if result:
                password, strength, feedback = result
                print(f"\nüîê –í–∞—à –ø–∞—Ä–æ–ª—å: {password}")
                print("\n".join(feedback))
        
        elif choice == '2':
            generate_multiple_passwords()
        
        elif choice == '3':
            print("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
            break
        
        else:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

if __name__ == "__main__":
    main()